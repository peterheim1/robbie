<launch>

    <!-- LANGUAGE PIPELINE -->

    <!-- Launch pocketsphinx for speech recognition 
    <node pkg="pocketsphinx" type="speech_text.py" name="speech_text" output="screen" >
        <param name="lm_path" value="$(find pocketsphinx)/model/mini_meet_greet2/" />
    </node>
-->
    <!-- Launch a node to push terminal input instead of speech recognition -->
    <node pkg="robbie" type="terminal_input.py" name="terminal_input" output="screen" >
    </node>

    <!-- Launch a node that republishes the output of NLTK as a string (representation of a parse tree) -->
    <node pkg="nltk_parser" type="language.py" name="simple_chart_parser" output="screen" >
    
        <param name="grammar_path" value="$(find nltk_parser)" />
        <param name="grammar_name" value="language.cfg" />
    </node>
    
    <!-- Node that republishes the output of simple chart parse.py to be useful for robbie's AI -->
    <node pkg="nltk_interpret" type="nltk_interpret.py" name="nltk_interpret" output="screen" />

   

    <!-- Launch a node that manages the conversation with the human 
    <node pkg="robbie_ai" type="konverse.py" name="robbie_konverse" output="screen" />

-->
    <!-- node pkg="nltk_parser" type="nltk_parser.py" name="nltk_parser_service" output="screen" >
        <param name="grammar_path" value="$(find nltk_parser)" />
        <param name="grammar_name" value="simple_command_grammar.cfg" />
    </node -->

    <!-- node pkg="nltk_parser" type="nltk_ww_interpreter.py" name="nltk_ww_interpreter_service" output="screen" >
    </node -->


    <!-- Launch festival text-to-speech node-->
    <node pkg="festival" type="speak_text.py" name="speak_text_service" output="screen" />

    <node name="uvc_cam_node" pkg="uvc_cam" type="uvc_cam_node" output="screen">
	<param name="frame_rate" value="15.0" />	
	<param name="absolue_exposure" value="80"/>
    </node>

</launch>
